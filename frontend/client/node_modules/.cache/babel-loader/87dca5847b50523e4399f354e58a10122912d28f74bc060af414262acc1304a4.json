{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryu91\\\\create_matching_service\\\\frontend\\\\client\\\\src\\\\components\\\\Matching.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Matching = () => {\n  _s();\n  const [isMatching, setIsMatching] = useState(null);\n  // useLocationフックを使用して現在のロケーション情報を取得\n  const location = useLocation();\n  // location.stateからisLoggedInとusernameを取得\n  const {\n    isLoggedIn\n  } = location.state || {};\n  const userUUID = Cookies.get('user_uuid');\n\n  // const checkFavorite = () => {\n  //   const data = {\n  //     user_uuid: userUUID,          // ログイン中のユーザーのID\n  //     target_user_uuid: 'user2'    // お気に入りを確認したい相手のID\n  //   };\n  //   axios.post('http://localhost:5000/matching', data)\n  //     .then(response => {\n  //       setIsFavorite(response.data.is_favorite);\n  //     })\n  //     .catch(error => {\n  //       console.error('Error checking favorite:', error);\n  //     });\n  // };\n  useEffect(() => {\n    // お気に入りのユーザーデータを取得する関数を定義\n    const fetchMatching = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/matching', {\n          headers: {\n            'Authorization': `Bearer ${userUUID}` // ヘッダーにuser_uuidを含める\n          }\n        });\n        setIsMatching(response.data);\n      } catch (error) {\n        console.error('Error fetching Matching: ', error);\n      }\n    };\n\n    // ページが読み込まれたときにお気に入りのユーザーデータを取得\n    fetchFavorites();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isFavorite === null ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isFavorite ? 'You have favorited this user.' : 'You have not favorited this user.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Matching, \"z4lBKMiAVsbHQwIuAZ5yy41MoB0=\", false, function () {\n  return [useLocation];\n});\n_c = Matching;\nexport default Matching;\nvar _c;\n$RefreshReg$(_c, \"Matching\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","Cookies","jsxDEV","_jsxDEV","Matching","_s","isMatching","setIsMatching","location","isLoggedIn","state","userUUID","get","fetchMatching","response","headers","data","error","console","fetchFavorites","children","isFavorite","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ryu91/create_matching_service/frontend/client/src/components/Matching.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { useLocation } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\nconst Matching = () => {\r\n  const [isMatching, setIsMatching] = useState(null);\r\n  // useLocationフックを使用して現在のロケーション情報を取得\r\n  const location = useLocation();\r\n  // location.stateからisLoggedInとusernameを取得\r\n  const { isLoggedIn } = location.state || {};\r\n  const userUUID = Cookies.get('user_uuid');\r\n  \r\n  // const checkFavorite = () => {\r\n  //   const data = {\r\n  //     user_uuid: userUUID,          // ログイン中のユーザーのID\r\n  //     target_user_uuid: 'user2'    // お気に入りを確認したい相手のID\r\n  //   };\r\n  //   axios.post('http://localhost:5000/matching', data)\r\n  //     .then(response => {\r\n  //       setIsFavorite(response.data.is_favorite);\r\n  //     })\r\n  //     .catch(error => {\r\n  //       console.error('Error checking favorite:', error);\r\n  //     });\r\n  // };\r\n  useEffect(() => {\r\n    // お気に入りのユーザーデータを取得する関数を定義\r\n    const fetchMatching = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/matching', {\r\n                headers: {\r\n                  'Authorization': `Bearer ${userUUID}`  // ヘッダーにuser_uuidを含める\r\n                }\r\n              });\r\n              setIsMatching(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching Matching: ', error);\r\n        }\r\n    };\r\n\r\n    // ページが読み込まれたときにお気に入りのユーザーデータを取得\r\n    fetchFavorites();\r\n}, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* <button onClick={checkFavorite}>Check Favorite</button> */}\r\n      {isFavorite === null ? null : (\r\n        <p>{isFavorite ? 'You have favorited this user.' : 'You have not favorited this user.'}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Matching;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD;EACA,MAAMW,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B;EACA,MAAM;IAAES;EAAW,CAAC,GAAGD,QAAQ,CAACE,KAAK,IAAI,CAAC,CAAC;EAC3C,MAAMC,QAAQ,GAAGV,OAAO,CAACW,GAAG,CAAC,WAAW,CAAC;;EAEzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAd,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACa,GAAG,CAAC,gCAAgC,EAAE;UAC/DG,OAAO,EAAE;YACP,eAAe,EAAG,UAASJ,QAAS,EAAC,CAAE;UACzC;QACF,CAAC,CAAC;QACFJ,aAAa,CAACO,QAAQ,CAACE,IAAI,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;;IAED;IACAE,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEJ,oBACEhB,OAAA;IAAAiB,QAAA,EAEGC,UAAU,KAAK,IAAI,GAAG,IAAI,gBACzBlB,OAAA;MAAAiB,QAAA,EAAIC,UAAU,GAAG,+BAA+B,GAAG;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC3F;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CAhDID,QAAQ;EAAA,QAGKJ,WAAW;AAAA;AAAA0B,EAAA,GAHxBtB,QAAQ;AAkDd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}